@mixin flexstyle($type, $content, $align) { // flex style with argument
  display: $type;
  -webkit-display: $type;
  -moz-display: $type;
  -ms-display: $type;
  display:flex;
 
  display: -webkit-flex;
  -webkit-box-pack: $content;
  -ms-flex-pack: $content;
    justify-content: $content;
  -webkit-justify-content: $content;
  -moz-justify-content: $content;
  -ms-justify-content: $content;
  align-items: $align;
  -webkit-align-items: $align;
  -moz-align-items: $align;
  -ms-align-items: $align;
}
// Flexbox Mixins
// --------------------------------------------------
// http://philipwalton.github.io/solved-by-flexbox/
// https://github.com/philipwalton/solved-by-flexbox

@mixin display-flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -moz-box;
  display: -moz-flex;
  display: -ms-flexbox;
  display: flex;
}

@mixin display-inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
   @if $value == row-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: horizontal;
   } @else if $value == column {
      -webkit-box-direction: normal;
      -webkit-box-orient: vertical;
   } @else if $value == column-reverse {
      -webkit-box-direction: reverse;
      -webkit-box-orient: vertical;
   } @else {
      -webkit-box-direction: normal;
      -webkit-box-orient: horizontal;
   }
   -webkit-flex-direction: $value;
   -moz-flex-direction: $value;
   -ms-flex-direction: $value;
   flex-direction: $value;
}

@mixin flex-wrap($value: nowrap) {
  // No Webkit Box fallback.
   -webkit-flex-wrap: $value;
   -moz-flex-wrap: $value;
   @if $value == nowrap {
      -ms-flex-wrap: none;
   } @else {
      -ms-flex-wrap: $value;
   }
   flex-wrap: $value;
}

@mixin flex($fg: 1, $fs: null, $fb: null) {
   -webkit-box-flex: $fg;
   -webkit-flex: $fg $fs $fb;
   -moz-box-flex: $fg;
   -moz-flex: $fg $fs $fb;
   -ms-flex: $fg $fs $fb;
   flex: $fg $fs $fb;
}

@mixin flex-flow($values: (row nowrap)) {
   // No Webkit Box fallback.
   -webkit-flex-flow: $values;
   -moz-flex-flow: $values;
   -ms-flex-flow: $values;
   flex-flow: $values;
}

@mixin align-items($value: stretch) {
   @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
   } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
   } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
   }
   -webkit-align-items: $value;
   -moz-align-items: $value;
   align-items: $value;
}

@mixin align-self($value: auto) {
   -webkit-align-self: $value;
   -moz-align-self: $value;
   @if $value == flex-start {
    -ms-flex-item-align: start;
   } @else if $value == flex-end {
    -ms-flex-item-align: end;
   } @else {
    -ms-flex-item-align: $value;
   }
   align-self: $value;
}

@mixin align-content($value: stretch) {
   -webkit-align-content: $value;
   -moz-align-content: $value;
   @if $value == flex-start {
    -ms-flex-line-pack: start;
   } @else if $value == flex-end {
    -ms-flex-line-pack: end;
   } @else {
    -ms-flex-line-pack: $value;
   }
   align-content: $value;
}

@mixin justify-content($value: stretch) {
   @if $value == flex-start {
      -webkit-box-pack: start;
      -ms-flex-pack: start;
   } @else if $value == flex-end {
      -webkit-box-pack: end;
      -ms-flex-pack: end;
   } @else if $value == space-between {
      -webkit-box-pack: justify;
      -ms-flex-pack: justify;
   } @else {
      -webkit-box-pack: $value;
      -ms-flex-pack: $value;
   }
   -webkit-justify-content: $value;
   -moz-justify-content: $value;
   justify-content: $value;
}

// Text Clamp
// ------------------------------

@mixin text-clamp($lineHeight, $lines) {
   overflow: hidden;
   text-overflow: ellipsis;
   display: -webkit-box;
   line-height: $lineHeight;     /* fallback */
   max-height: $lineHeight * $lines;      /* fallback */
   -webkit-line-clamp: $lines;   /* number of lines to show */
   -webkit-box-orient: vertical;
} 
@mixin text_clamp($lineHeight, $lines) {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    line-height: $lineHeight;
    max-height: $lineHeight * $lines;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
}
// Placeholder Text
// ------------------------------------------
@mixin placeholder($color: $input-color-placeholder, $text-indent: 0) {
   &::-moz-placeholder { // Firefox 19+
      color: $color;
   }
   &:-ms-input-placeholder {
      color: $color;
   }
   &::-webkit-input-placeholder {
      color: $color;
    // Safari placeholder margin issue
      text-indent: $text-indent;
   }
}

// Border Radius Mixins
// --------------------------------------------------

@mixin border-radius($radius) {
   -webkit-border-radius: $radius;
   -moz-border-radius: $radius;
   -ms-border-radius: $radius;
   border-radius: $radius;
}

// Box shadows
// --------------------------------------------------

@mixin box-shadow($shadow...) {
   -webkit-box-shadow: $shadow;
   -moz-box-shadow: $shadow;
   -ms-box-shadow: $shadow;
   box-shadow: $shadow;
}

// Transition Mixins
// --------------------------------------------------

@mixin transition($transition...) {
   -webkit-transition: $transition;
   -moz-transition: $transition;
   -ms-transition: $transition;
   transition: $transition;
}
@mixin transition-delay($transition-delay) {
   -webkit-transition-delay: $transition-delay;
   -moz-transition-delay: $transition-delay;
   -ms-transition-delay: $transition-delay;
   transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration) {
   -webkit-transition-duration: $transition-duration;
   -moz-transition-duration: $transition-duration;
   -ms-transition-duration: $transition-duration;
   transition-duration: $transition-duration;
}
@mixin transition-timing-function($transition-timing) {
   -webkit-transition-timing-function: $transition-timing;
   -ms-transition-timing-function: $transition-timing;
   -moz-transition-timing-function: $transition-timing;
   transition-timing-function: $transition-timing;
}
@mixin transition-property($property) {
   -webkit-transition-property: $property;
   -ms-transition-property: $property;
   -moz-transition-property: $property;
   transition-property: $property;
}
@mixin transition-transform($properties...) {
  // special case cuz of transform vendor prefixes
   -webkit-transition: -webkit-transform $properties;
   -moz-transition: -webkit-transform $properties;
   -ms-transition: -webkit-transform $properties;
   transition: transform $properties;
}


// Transformation Mixins
// --------------------------------------------------

@mixin transform($val) {
   -webkit-transform: $val;
   -moz-transform: $val;
   -ms-transform: $val; 
   transform: $val;
}

@mixin rotate($degrees) {
   @include transform( rotate($degrees) );
}
@mixin scale($ratio) {
   @include transform( scale($ratio) );
}
@mixin translate($x, $y) {
   @include transform( translate($x, $y) );
}
@mixin skew($x, $y) {
   @include transform( skew($x, $y) );
   -webkit-backface-visibility: hidden;
}
@mixin translate3d($x, $y, $z) {
   @include transform( translate3d($x, $y, $z) );
}
@mixin translateZ($z) {
   @include transform( translateZ($z) );
}

// Animation Mixins
// --------------------------------------------------

@mixin animation($animation) {
   -webkit-animation: $animation;
   -moz-animation: $animation;
   -ms-animation: $animation;
   animation: $animation;
}
@mixin animation-duration($duration) {
   -webkit-animation-duration: $duration;
   -moz-animation-duration: $duration;
   -ms-animation-duration: $duration;
   animation-duration: $duration;
}
@mixin animation-direction($direction) {
   -webkit-animation-direction: $direction;
   -moz-animation-direction: $direction;
   -ms-animation-direction: $direction;
   animation-direction: $direction;
}
@mixin animation-timing-function($animation-timing) {
   -webkit-animation-timing-function: $animation-timing;
   -moz-animation-timing-function: $animation-timing;
   -ms-animation-timing-function: $animation-timing;
   animation-timing-function: $animation-timing;
}
@mixin animation-fill-mode($fill-mode) {
   -webkit-animation-fill-mode: $fill-mode;
   -moz-animation-fill-mode: $fill-mode;
   -ms-animation-fill-mode: $fill-mode;
   animation-fill-mode: $fill-mode;
}
@mixin animation-name($name...) {
   -webkit-animation-name: $name;
   -moz-animation-name: $name;
   -ms-animation-name: $name;
   animation-name: $name;
}
@mixin animation-iteration-count($count) {
   -webkit-animation-iteration-count: $count;
   -moz-animation-iteration-count: $count;
   -ms-animation-iteration-count: $count;
   animation-iteration-count: $count;
}


// Calculate Width
//--------------------------------------------

@mixin calcWidth($width) {
   width: -webkit-calc(100% - #{$width});
   width: calc(100% - #{$width});
   -webkit-width: calc(100% - #{$width});
   -ms-width: calc(100% - #{$width});
}
// add textshadow mixin
@mixin text-shadow($top,$left,$blur,$color,$inset:false) {
      @if $inset {
    -webkit-box-shadow:inset $top $left $blur $color;
    -moz-box-shadow:inset $top $left $blur $color;
    box-shadow:inset $top $left $blur $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
  }
}

/* container */

@mixin mq($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
        @content;
      }
    }
}